[{"title":"Mobee Documentation","type":0,"sectionRef":"#","url":"/documentation/docs/documentation-api/","content":"Mobee Documentation Mobee Documentation is a comprehensive guide that provides information and resources on setting up and using Mobee, a powerful platform for managing your community. Feel free to explore the different sections.","keywords":""},{"title":"Community Supported Features","type":0,"sectionRef":"#","url":"/documentation/docs/documentation-api/Community/Community Supported Features","content":"","keywords":""},{"title":"Supported Theme and Branding in Community​","type":1,"pageTitle":"Community Supported Features","url":"/documentation/docs/documentation-api/Community/Community Supported Features#supported-theme-and-branding-in-community","content":"Colors Settings Name\tSupported In MobeeText Color\t✅ Detail Text Color\t✅ Action Color\t✅ Link Color\t✅ Overlay Text Color Border Color Page Background Color\t✅ "},{"title":"Supported Chatter Type in Community​","type":1,"pageTitle":"Community Supported Features","url":"/documentation/docs/documentation-api/Community/Community Supported Features#supported-chatter-type-in-community","content":"Chatter Type\tCreate\tComment\tLikePost\t✅\t✅\t✅ Question Poll  "},{"title":"Mobee Community Setup","type":0,"sectionRef":"#","url":"/documentation/docs/documentation-api/Community/Mobee Community Setup","content":"","keywords":""},{"title":"Setup Mobee Community​","type":1,"pageTitle":"Mobee Community Setup","url":"/documentation/docs/documentation-api/Community/Mobee Community Setup#setup-mobee-community","content":"Salesforce does not allow community users to access some metadata using the API. To work around these limitations and optimize governor limits, Mobee provides a set of automated tools that extract the required metadata, including pages from Experience Cloud and other resources. The Mobee automated tools generate JSON files and zip files for the metadata records resources that will be included in the static resource. To set up Mobee Community, follow the steps below: Execute the Mobee procedure provided with the AppExchange. Provide the name of the Experience Cloud Site and any additional languages required. Mobee.SetupUtils.prepareMobeeResources('Customer_Site1', 'fr'); You can also run the individual tools using the following sub-procedures: Mobee.SetupUtils.refreshCoreMetadata(); Mobee.SetupUtils.refreshCustomLabel(); Mobee.SetupUtils.refreshExternalStringLocalization('fr'); Mobee.SetupUtils.siteExperienceBundleQueueable('Customer_Site1');  It is important to run these automated tools for the first time and each time you publish your Experience Cloud Site. The estimated time for running the tools is about 2 minutes. The output of the procedure will generate the following files in the Static Resources directory: Resource\tDescriptionMobee_CoreMetadata\tContains the main metadata of the Salesforce Core System, such as Validation Rules, Web Links, Lookup Filters, and Flow definitions. Mobee_CoreCustomLabel\tContains the custom labels. Mobee_CoreExternalStringLocalization\tContains the translated custom labels for the specified language. Mobee_Community_Customer_Site1\tContains the Experience Cloud Site pages, themes, and other resources. How to verify if your resources are up to date? Check the last modified date of the output files to ensure that the files are up to date. "},{"title":"Output files in the Static Resources​","type":1,"pageTitle":"Mobee Community Setup","url":"/documentation/docs/documentation-api/Community/Mobee Community Setup#output-files-in-the-static-resources","content":"File\tType\tDescriptionMobee_CoreMetadata\tJson File\tMobee Core Metadata listes Mobee_CoreCustomLabel\tJson File\tMobee Core CustomLabels Mobee_CoreExternalStringLocalization\tJson File\tMobee Core ExternalStringLocalization Mobee_Community_Customer_Site1\tZip File\tSite pages, components, and properties "},{"title":"Introduction","type":0,"sectionRef":"#","url":"/documentation/docs/documentation-api/Document Generation Module/mobee-document-introduction","content":"","keywords":""},{"title":"Purpose​","type":1,"pageTitle":"Introduction","url":"/documentation/docs/documentation-api/Document Generation Module/mobee-document-introduction#purpose","content":"The primary purpose of the Mobee Document Generation Module is to facilitate the creation of customized documents based on predefined templates. These documents can range from individualized reports to bulk-generation for multiple records, offering flexibility to adapt to various use cases within Salesforce. "},{"title":"Fulfilling Business Needs​","type":1,"pageTitle":"Introduction","url":"/documentation/docs/documentation-api/Document Generation Module/mobee-document-introduction#fulfilling-business-needs","content":"Efficiency and Productivity: The module enhances operational efficiency by providing quick and user-friendly document generation tools, reducing manual effort. Customization: With support for various templates, filters, and dynamic placeholders, Mobee allows users to tailor document outputs to specific business requirements. Automation: The ability to automate document generation processes ensures consistency and accuracy, especially in scenarios involving repetitive tasks or batch processing. Integration: Seamless integration into Salesforce workflows ensures that document generation is an integral part of the overall business processes. Whether fulfilling the need for on-the-fly document creation, bulk-generation for reporting, or automated document production, the Mobee Document Generation Module serves as a comprehensive solution within the Salesforce environment, catering to a wide array of use cases. "},{"title":"Configuration and Usage","type":0,"sectionRef":"#","url":"/documentation/docs/documentation-api/Document Generation Module/mobee-document-configuration","content":"","keywords":""},{"title":"User Profile Requirements and Permissions​","type":1,"pageTitle":"Configuration and Usage","url":"/documentation/docs/documentation-api/Document Generation Module/mobee-document-configuration#user-profile-requirements-and-permissions","content":"To utilize the module, users must meet the following prerequisites: Possession of a Mobee license.Assignment of either the &quot;Mobee User&quot; or &quot;Mobee Administrator&quot; permission set.Enable User External Credentials Through User Profiles if needed. "},{"title":"Retrieve and Reset Document Generation Token​","type":1,"pageTitle":"Configuration and Usage","url":"/documentation/docs/documentation-api/Document Generation Module/mobee-document-configuration#retrieve-and-reset-document-generation-token","content":"Open the Mobee Settings by navigating to the App Launcher and searching for Mobee Settings. Click on &quot;Mobee Settings&quot; in the &quot;Items&quot; section.  In Mobee Settings, navigate to the &quot;Document Generation&quot; tab. Within the &quot;Document Generation&quot; tab, you will find Your Organization Token if your Organization is subscribed to the Mobee Document Generation service. Utilize this token to authorize your access to the document generation. You can click on the button to the left of the 'Reset Button' to copy the token to your clipboard or select and copy it.  If you need to reset the token, locate the &quot;Reset Token&quot; button on the right. Clicking this button will allow you to generate a new token for your Organization.  Note: Make sure to update the token in the Custom Headers when you reset it in the Mobee Settings. "},{"title":"Access Authorization​","type":1,"pageTitle":"Configuration and Usage","url":"/documentation/docs/documentation-api/Document Generation Module/mobee-document-configuration#access-authorization","content":"Mobee's document generation relies on an external service, making authorization vital for security. By employing Token authentication, only authenticated entities can access the service, eliminating the risk of unauthorized use and ensuring robust protection against data breaches. "},{"title":"Mobee Document Generator External Credential Setup​","type":1,"pageTitle":"Configuration and Usage","url":"/documentation/docs/documentation-api/Document Generation Module/mobee-document-configuration#mobee-document-generator-external-credential-setup","content":"This section outlines a step-by-step guide on how to set up external credentials for Mobee Document Generator, including creating a custom authentication protocol, adding parameters, custom headers, and integrating with Uprizon for authentication. "},{"title":"Setup External Credentials​","type":1,"pageTitle":"Configuration and Usage","url":"/documentation/docs/documentation-api/Document Generation Module/mobee-document-configuration#setup-external-credentials","content":"Open the external credentials management interface by navigating to Setup &gt; Security &gt; Named Credentials.  Click on the &quot;External Credentials&quot; tab.  Locate the external credential with the label &quot;Document Generation External Credentials&quot; and click on it.   In the &quot;Document Generation External Credentials,&quot; find the Custom Headers with the Name &quot;Authorization&quot;, click on the arrow on the right and select &quot;Edit&quot;.   Inside the Custom Headers Window, Add The Token To The Custom Header: Replace the Value by the token provided by in the Mobee Settings Page: Name: AuthorizationValue: Bearer [Token provided by Mobee] Note: Before saving, ensure that the token has the &quot;Bearer &quot; prefix. If not, add the prefix with a trailing space at the end. For example: If the token is eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c, make it: Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c Click on &quot;Save&quot; to save the custom header.  Note: Make sure to update the token in the Custom Headers when you reset it in the Mobee Settings. "},{"title":"Creating a Document Template​","type":1,"pageTitle":"Configuration and Usage","url":"/documentation/docs/documentation-api/Document Generation Module/mobee-document-configuration#creating-a-document-template","content":"Navigate to the Mobee Documents Templates Salesforce Tab to initiate the creation of a new template.Click on the &quot;New&quot; button and furnish a suitable name for the template.  After the successful creation of the template, the next step involves associating it with a specific Salesforce object. Follow the steps below: Access the newly created template by selecting its name from the list.Within the initial section, click the &quot;Choose Main Object&quot; button located on the right.Utilize the lookup search field to designate the desired main object.Opt for a Salesforce field on the selected object to serve as the naming convention for the generated file. Supported types include text fields and formulas. The Name field is selected by default.  After the selection of the main object and naming field, proceed to upload your Word document template by selecting the &quot;Upload&quot; button. Please note that only files with the .docx extension are supported.  "},{"title":"Generate Documents from Template​","type":1,"pageTitle":"Configuration and Usage","url":"/documentation/docs/documentation-api/Document Generation Module/mobee-document-configuration#generate-documents-from-template","content":"Mobee offers a range of options to facilitate document generation tailored to your specific requirements. The package encompasses pre-built components ready for immediate use, seamlessly integratable into your pages. Moreover, Mobee provides functionalities allowing you to customize your entire document generation processes using Lightning or even Apex. "},{"title":"Lightning Web Component​","type":1,"pageTitle":"Configuration and Usage","url":"/documentation/docs/documentation-api/Document Generation Module/mobee-document-configuration#lightning-web-component","content":"For manual document generation within a screen, Mobee presents a fundamental Lightning Web Component designed to generate documents for the current record based on a specified template ID. Below are the component parameters:  Current Record Id: When placed on a record page, this parameter can be left empty, as it automatically detects the ID of the current record. Multiple Record Ids (Comma Separated): This parameter can be left empty when generating unitary documents and will be used for combined document templates later. Attach to Record: A flag indicating whether the user wishes to attach the generated document to the Notes &amp; Attachments of the current record. If unchecked, the document will be automatically downloaded. Current Object API Name: When placed on a record page, this parameter can be left empty, as it automatically detects the object API Name of the current record. Selected Template Id: Informs the component about the template to be used for the generation. Show Generate Button: A flag indicating whether a physical button is desired to trigger the generation. If unchecked, document generation will be triggered upon loading the page containing the component. Output Format: This parameter indicates the desired format for the generated file. Mobee currently supports docx and pdf. Usage: This component is suitable for use in both &quot;Record Lightning Pages&quot; and &quot;Flow Screens.&quot; To harness the full capabilities of this component, it is recommended to use it in Flow Screens. Leveraging Flow's flexibility enables dynamic fetching of the desired template based on specific search criteria, providing a dynamic parameter to the component, and avoiding the inclusion of parameters in hard text. Here's an example of its usage in a Screen Flow.  "},{"title":"Action Button​","type":1,"pageTitle":"Configuration and Usage","url":"/documentation/docs/documentation-api/Document Generation Module/mobee-document-configuration#action-button","content":"The Mobee package seamlessly integrates with Salesforce record pages, providing an out-of-the-box Flow that can be effortlessly added as an action button. Creating the Action Button: Navigate to the object manager and select the object where you want the generation button to be available.Go to the &quot;Buttons, Links, and Actions&quot; section and click on the &quot;New Action&quot; button.Choose the &quot;Lightning Web Component&quot; option for the &quot;Action Type,&quot; and select &quot;Mobee:documentGeneratorAction&quot; for the &quot;Lightning Web Component.&quot;  Adding the Action Button to a Page Layout: Once the action button is created, follow these steps to add it to a desired &quot;Page Layout.&quot; Open the &quot;Page Layouts&quot; section from the object manager and select the desired page where you want to add your button.Locate your newly created button in the &quot;Mobile &amp; Lightning Actions&quot; Section.Drag the button and drop it into the &quot;Salesforce Mobile and Lightning Experience Action&quot; section.  Utilizing the Added Button: To utilize the added button, follow these steps: Navigate to a record of the same object type as the created document template.Click the &quot;Generate Document&quot; action button.Select the desired template from the provided selection list.The document will be generated and automatically downloaded.  "},{"title":"List View Button​","type":1,"pageTitle":"Configuration and Usage","url":"/documentation/docs/documentation-api/Document Generation Module/mobee-document-configuration#list-view-button","content":"Similar to the aforementioned action button, Mobee extends its functionality by offering a Flow that can be invoked from list view buttons. This feature emphasizes the capability to generate documents for multiple records simultaneously. Creating a List View Button: Follow these steps to create the button: Prepare a template to be used on the desired main object.From the Setup screen, select the desired main object.Go to the &quot;Buttons, Links, and Actions&quot; section.Click on the top-right &quot;New Button or Link&quot; button.Complete the required Label and Name input fields.Select List Button from the &quot;Display Type&quot; and ensure that the &quot;Display Checkboxes (for Multi-Record Selection)&quot; option is checked.In the formula text area, input the following path and replace the template ID with your desired template: /flow/Mobee__ListViewDocumentGenerator?templateId=a057Q000005Yd7BQAS&amp;attachToRecord=false&amp;outputFormat=pdf  Adding the Button to the List View: To add the button to the list view, follow these steps: From the &quot;Object Manager&quot;, access the &quot;List View Button Layout&quot; section.For the list view layout, click the dropdown button on the right and select &quot;Edit.&quot;In the List View Editor, find your button in the &quot;Custom Buttons&quot; section and add it to the Selected Buttons List.Click on Save. Utilizing the Added Button: To utilize the list view button, follow these steps: Go to the object list view.Select your desired records by clicking on the checkbox on each line.Locate your button in the button list in the top actions section.Click on the button, which will open the flow in a new page and generate the documents. Note: This &quot;Custom Button&quot; can also be used for Related List Views. "},{"title":"Apex Client​","type":1,"pageTitle":"Configuration and Usage","url":"/documentation/docs/documentation-api/Document Generation Module/mobee-document-configuration#apex-client","content":"Document generation is not always a user-triggered functionality; at times, there's a need to generate documents from triggers, jobs, and other automated processes. To facilitate this, Mobee provides an Apex function that enables seamless document generation tailored to specific requirements. The function is accessible within the Mobee package by invoking the Mobee.DocumentTemplaterController.generateDocuments function. Similar to the Lightning Web Component, this Apex function takes four parameters as input: A list of Salesforce record IDs for which documents need to be generated. (It can be a list containing a single ID)The Mobee Document Template ID to be used as the template for the generation.The desired output format (docx or pdf).A flag indicating whether to attach the generated file to the given record. This function returns a Map containing the generated file as Blob indexed by their respective record IDs. Here's an example of utilizing this Apex function: Context: In this example, the Mobee Template Main Object is the Application__c custom object, and the template Id is stored in the ContractTemplate__c lookup field, which is on the parent field Sector__c. public class DocumentGeneration { @Future(callout=true) public static void generateContract(String applicationId) { String OUTPUT_FORMAT = 'pdf'; Application__c application = [SELECT Id, Sector__c.ContractTemplate__c FROM Application__c WHERE Id = :applicationId]; if (application.Sector__c.ContractTemplate__c == null) { throw new Mobee.DocumentGenerationException('Template is not defined on this Sector.'); } Map&lt;Id, Blob&gt; generatedDocuments; if (Test.isRunningTest()) { generatedDocuments = generateDocumentMock(new List&lt;Id&gt;{applicationId}); } else { generatedDocuments = Mobee.DocumentTemplaterController.generateDocuments( // recordsIds new List&lt;String&gt;{applicationId}, // templateId application.Sector__c.ContractTemplate__c, // outputFormat OUTPUT_FORMAT, // attachToRecords false); } Blob generatedDocument = generatedDocuments.get(applicationId); if (generatedDocument == null) { throw new Mobee.DocumentGenerationException('Error while generating document.'); } // Do whatever you want with the Blob... } }  "},{"title":"Compress PDF​","type":1,"pageTitle":"Configuration and Usage","url":"/documentation/docs/documentation-api/Document Generation Module/mobee-document-configuration#compress-pdf","content":"Mobee provides a feature to compress PDF files, helping to reduce their size. Users can provide either a local file path or a URL to a PDF file, which will then be downloaded and compressed. "},{"title":"Usage​","type":1,"pageTitle":"Configuration and Usage","url":"/documentation/docs/documentation-api/Document Generation Module/mobee-document-configuration#usage","content":"Input Parameters File Path or URL: The location of the PDF file to be compressed, either as a local path or an online URL.Color Image Resolution (default: 120 DPI): Sets the resolution of color images within the PDF. Higher values provide better image quality but result in larger file sizes.Grayscale Image Resolution (default: 120 DPI): Controls the resolution of grayscale images, which contain shades of gray but no color. Adjusting this setting affects the clarity of grayscale images.Monochrome Image Resolution (default: 120 DPI): Specifies the resolution for monochrome (black and white) images in the PDF. This impacts the sharpness of text and line art. Important Notes: The default resolution for all image types is set to 120 DPI.Higher resolution settings increase image quality but also enlarge the file size.Adjust the resolution settings based on your balance between image quality and file size. "},{"title":"Apex Client​","type":1,"pageTitle":"Configuration and Usage","url":"/documentation/docs/documentation-api/Document Generation Module/mobee-document-configuration#apex-client-1","content":"PDF compression isn't always triggered manually by users. Sometimes, automated processes such as triggers or scheduled jobs need to compress documents. To support these scenarios, Mobee provides an Apex function that allows seamless document compression tailored to specific needs. The function is available in the Mobee package through Mobee.DocumentsApiClient.compressDocument. This Apex function requires four input parameters: A list of Salesforce record IDs for the documents to be compressed (or a single URL).Color Image Resolution.Grayscale Image Resolution.Monochrome Image Resolution. Example Use Case: In the following example, the document to be compressed is identified by its Salesforce record ID or URL. /** * @description This class provides functionality to compress PDF invoice files * before saving them to Salesforce. * * @usage Compresses the given PDF blob using specified compression options * and saves the compressed version via InvoiceController. */ public with sharing class InvoiceController { /** * @description Compresses a given PDF invoice blob using predefined settings * to reduce file size while maintaining readability. * * @param invoicePdfBlob The original PDF invoice file in Blob format. * * @throws IllegalArgumentException If the provided blob is null or empty. * * @example * Blob pdfBlob = [SELECT Body FROM ContentVersion WHERE Title = 'SampleInvoice'].Body; * InvoiceController.compressInvoice(pdfBlob); */ public static void compressInvoice(Blob invoicePdfBlob) { if (invoicePdfBlob == null || invoicePdfBlob.size() == 0) { throw new IllegalArgumentException('The invoice PDF blob cannot be null or empty.'); } // Define compression settings Map&lt;String, String&gt; compressionOptions = new Map&lt;String, String&gt;{ 'ColorImageResolution' =&gt; '72', // Set color image resolution to 72 DPI 'GrayImageResolution' =&gt; '72', // Set grayscale image resolution to 72 DPI 'MonoImageResolution' =&gt; '72' // Set monochrome image resolution to 72 DPI }; try { Blob compressedInvoice = DocumentsApiClient.compressDocument(invoicePdfBlob, compressionOptions); InvoiceController.saveInvoice(compressedInvoice); System.debug('Invoice successfully compressed and saved.'); } catch (Exception ex) { System.debug('Error during compression: ' + ex.getMessage()); throw new AuraHandledException('Failed to compress the invoice: ' + ex.getMessage()); } } }  This example demonstrates how to efficiently compress and store PDF invoices in Salesforce while maintaining an optimal balance between quality and file size. "},{"title":"Mobee Mobile App Installation Guide","type":0,"sectionRef":"#","url":"/documentation/docs/documentation-api/Mobee Installation Guide/mobile-app-installation-guide","content":"","keywords":""},{"title":"1. Installation:​","type":1,"pageTitle":"Mobee Mobile App Installation Guide","url":"/documentation/docs/documentation-api/Mobee Installation Guide/mobile-app-installation-guide#1-installation","content":"Download and install the Mobee Mobile App from the App Store (for iOS devices) or Google Play Store (for Android devices). "},{"title":"2. Initial Setup:​","type":1,"pageTitle":"Mobee Mobile App Installation Guide","url":"/documentation/docs/documentation-api/Mobee Installation Guide/mobile-app-installation-guide#2-initial-setup","content":"Launch the app. Upon opening, a login prompt will appear.Use your Salesforce credentials for logging in.Modify the connection server based on your requirements: choose from Production, Sandbox, or Custom Domain. "},{"title":"3. Confirmation and Access Permissions:​","type":1,"pageTitle":"Mobee Mobile App Installation Guide","url":"/documentation/docs/documentation-api/Mobee Installation Guide/mobile-app-installation-guide#3-confirmation-and-access-permissions","content":"After logging in, you'll receive a confirmation code. Enter this code as prompted.For seamless operation, grant the necessary permissions when requested by the app. "},{"title":"4. Synchronization:​","type":1,"pageTitle":"Mobee Mobile App Installation Guide","url":"/documentation/docs/documentation-api/Mobee Installation Guide/mobile-app-installation-guide#4-synchronization","content":"Upon successful login, you'll be greeted with a splash screen detailing the synchronization process.This step's duration varies based on the volume of data to synchronize.  "},{"title":"5. Optimizing Synchronization:​","type":1,"pageTitle":"Mobee Mobile App Installation Guide","url":"/documentation/docs/documentation-api/Mobee Installation Guide/mobile-app-installation-guide#5-optimizing-synchronization","content":"For a faster sync, consider limiting the number of objects you wish to synchronize.Utilize the “List View Filter” and the “File Sync Down” options available in Mobee Object Setup. Note: Disabling the “File Sync Down” option will stop files from being downloaded to your device. However, any attachment created by users will still be uploaded. "},{"title":"6. Offline Access:​","type":1,"pageTitle":"Mobee Mobile App Installation Guide","url":"/documentation/docs/documentation-api/Mobee Installation Guide/mobile-app-installation-guide#6-offline-access","content":"Once data synchronization is complete, you can access the Home Pages, App Pages, Listviews, and Record Pages entirely offline.  Congratulations! You've successfully set up and are now using the Mobee App tool with your Salesforce org and mobile device. "},{"title":"Notifications Banner Component","type":0,"sectionRef":"#","url":"/documentation/docs/documentation-api/Notifications Banner/notifications-banner","content":"","keywords":""},{"title":"Overview​","type":1,"pageTitle":"Notifications Banner Component","url":"/documentation/docs/documentation-api/Notifications Banner/notifications-banner#overview","content":"The 'Notifications Banner' Lightning Web Component (LWC) provides a customizable notification display functionality within record pages. It retrieves information from two custom objects: 'Notification' and 'Notification Acknowledgement.' Users can create notifications with specific attributes and view them sliding in the component placed on the desired lightning page. Additionally, customization options for speed, background color, font color, and acknowledgment notification formatting are available. "},{"title":"Custom Objects​","type":1,"pageTitle":"Notifications Banner Component","url":"/documentation/docs/documentation-api/Notifications Banner/notifications-banner#custom-objects","content":"Notification: Fields: Name (required), Description, Start Date, End Date, Active (checkbox) Notification Acknowledgement: Fields: Date/Time of Acknowledgment, Acknowledged By "},{"title":"Functionality​","type":1,"pageTitle":"Notifications Banner Component","url":"/documentation/docs/documentation-api/Notifications Banner/notifications-banner#functionality","content":""},{"title":"Creation of Notifications:​","type":1,"pageTitle":"Notifications Banner Component","url":"/documentation/docs/documentation-api/Notifications Banner/notifications-banner#creation-of-notifications","content":"Users can create new notifications by providing a name which will be displayed as the title, description, start date, end date, and indicates if it's active or not.  Note: Start date, end date, description, and active status are not mandatory fields. "},{"title":"Integration in Record Page:​","type":1,"pageTitle":"Notifications Banner Component","url":"/documentation/docs/documentation-api/Notifications Banner/notifications-banner#integration-in-record-page","content":"Insert the 'Notifications Banner' component onto a lightning page to display created notifications sliding within the component.  Click on the notification and acknowledge it. "},{"title":"Customization Options:​","type":1,"pageTitle":"Notifications Banner Component","url":"/documentation/docs/documentation-api/Notifications Banner/notifications-banner#customization-options","content":"Notification Speed: This parameter controls the speed at which the notifications texts slide across the display. If you enter a higher value, the notifications will move faster.Background Color: Customize the background color of the notification banner using hexadecimal format (e.g., '#FFFFFF').Notification Font Color: Set the font color for the displayed notifications using hexadecimal format.  Notification Acknowledgement Name Format: Customize the format using placeholders encapsulated in brackets ({}) for field names from Notification Acknowledgement__c. Delimiters can be any character or none at all. "},{"title":"Usage​","type":1,"pageTitle":"Notifications Banner Component","url":"/documentation/docs/documentation-api/Notifications Banner/notifications-banner#usage","content":""},{"title":"Inserting Component on a Lightning Page:​","type":1,"pageTitle":"Notifications Banner Component","url":"/documentation/docs/documentation-api/Notifications Banner/notifications-banner#inserting-component-on-a-lightning-page","content":"Add the 'Notifications Banner' LWC component to a record page layout. "},{"title":"Customizations:​","type":1,"pageTitle":"Notifications Banner Component","url":"/documentation/docs/documentation-api/Notifications Banner/notifications-banner#customizations","content":"In the Lightning Page Builder, you can access its properties by clicking on the component to customize the following: Speed of slidingBackground colorFont color "},{"title":"Example Acknowledgment Format​","type":1,"pageTitle":"Notifications Banner Component","url":"/documentation/docs/documentation-api/Notifications Banner/notifications-banner#example-acknowledgment-format","content":"An example of the acknowledgment format: {Mobee__Notification__c}{SystemModstamp} or {Mobee__Notification__c}--{SystemModstamp}. Replace Mobee__Notification__c and SystemModstamp with appropriate field names from Notification Acknowledgement__c.Delimiters can be modified or omitted according to the desired format. "},{"title":"Notes​","type":1,"pageTitle":"Notifications Banner Component","url":"/documentation/docs/documentation-api/Notifications Banner/notifications-banner#notes","content":"Ensure necessary access permissions for the Notification and Notification Acknowledgement custom objects.Validate field-level security and user permissions for CRUD operations on both objects.Customization settings might require proper documentation for users/administrators. "},{"title":"Mobee AppExchange Installation Guide","type":0,"sectionRef":"#","url":"/documentation/docs/documentation-api/Mobee Installation Guide/package-installation-guide","content":"","keywords":""},{"title":"Salesforce AppExchange Package​","type":1,"pageTitle":"Mobee AppExchange Installation Guide","url":"/documentation/docs/documentation-api/Mobee Installation Guide/package-installation-guide#salesforce-appexchange-package","content":"To install the Mobee App Package from the AppExchange, follow the steps below: "},{"title":"1. Navigate to Mobee App Page:​","type":1,"pageTitle":"Mobee AppExchange Installation Guide","url":"/documentation/docs/documentation-api/Mobee Installation Guide/package-installation-guide#1-navigate-to-mobee-app-page","content":"Launch your web browser. Access the Mobee App page on AppExchange using the following link: Mobee App on AppExchange. "},{"title":"2. Install the Package:​","type":1,"pageTitle":"Mobee AppExchange Installation Guide","url":"/documentation/docs/documentation-api/Mobee Installation Guide/package-installation-guide#2-install-the-package","content":"Click on the &quot;Get It Now&quot; button.Choose the Salesforce org where you'd like to install the package. "},{"title":"3. User Management & Permission Assignment:​","type":1,"pageTitle":"Mobee AppExchange Installation Guide","url":"/documentation/docs/documentation-api/Mobee Installation Guide/package-installation-guide#3-user-management--permission-assignment","content":"Navigate to the user management page in Salesforce. Select a user. Assign the required permissions based on your operational requirements (options include: Mobee Administrator, Mobee User, Mobee Community Administrator, Mobee Community User, Mobee Time And Expenses Administrator, Mobee Time And Expenses User). "},{"title":"4. License Management:​","type":1,"pageTitle":"Mobee AppExchange Installation Guide","url":"/documentation/docs/documentation-api/Mobee Installation Guide/package-installation-guide#4-license-management","content":"Go to the Setup Page. Access the “Installed Packages” section. Click on the “Manage Licenses” link adjacent to the Mobee Package. This is where you can allocate licenses to specific users. "},{"title":"5. Mobee Object Setup:​","type":1,"pageTitle":"Mobee AppExchange Installation Guide","url":"/documentation/docs/documentation-api/Mobee Installation Guide/package-installation-guide#5-mobee-object-setup","content":"If you're a Mobee Administrator user, head over to the “Mobee Object Setup” tab.This tab is crucial for determining the objects that will synchronize with the mobile app. "},{"title":"6. Define Synchronization Settings:​","type":1,"pageTitle":"Mobee AppExchange Installation Guide","url":"/documentation/docs/documentation-api/Mobee Installation Guide/package-installation-guide#6-define-synchronization-settings","content":"Input the Object API Name. Adjust the settings as per your requirements. "},{"title":"7. Finalizing the Setup:​","type":1,"pageTitle":"Mobee AppExchange Installation Guide","url":"/documentation/docs/documentation-api/Mobee Installation Guide/package-installation-guide#7-finalizing-the-setup","content":"Upon finalizing your synchronization objects, users granted the correct permissions can now download and utilize the mobile application on both iOS and Android platforms. "},{"title":"Campaign Presence Registration","type":0,"sectionRef":"#","url":"/documentation/docs/documentation-api/Flows/campaign-presence-registration-flow","content":"","keywords":""},{"title":"Overview​","type":1,"pageTitle":"Campaign Presence Registration","url":"/documentation/docs/documentation-api/Flows/campaign-presence-registration-flow#overview","content":"The &quot;Campaign Presence Registration&quot; flow is aimed at streamlining the process of adding or updating contacts and leads to a campaign's membership list via Salesforce. With an emphasis on efficient campaign memberships management and providing a user-friendly and customizable platform, this flow navigates through a systematic process to verify, update, and manage the associated contact or lead, ensuring data accuracy and enriched user interactions. "},{"title":"Objective​","type":1,"pageTitle":"Campaign Presence Registration","url":"/documentation/docs/documentation-api/Flows/campaign-presence-registration-flow#objective","content":"The primary objective of the &quot;Campaign Presence Registration&quot; flow is to facilitate seamless management of campaign memberships by utilizing an email address as the key data point. This flow enhances the user experience in campaign management by offering options to verify, update, or create records, ensuring that each interaction is effectively capitalized upon for campaign membership management. "},{"title":"Full Customizability Tailored to User Needs​","type":1,"pageTitle":"Campaign Presence Registration","url":"/documentation/docs/documentation-api/Flows/campaign-presence-registration-flow#full-customizability-tailored-to-user-needs","content":"This flow provides comprehensive customization, allowing it to be adapted to meet specific user and business requirements. It not only addresses fundamental use-cases involving adding and updating members in a campaign but also provides a flexible platform to: Introduce additional fields for updating.Implement unique logic for campaign member status updating.Customize user interaction screens for enhanced user experience.Integrate additional checks or processes as per the business workflow. "},{"title":"Flow Functionality​","type":1,"pageTitle":"Campaign Presence Registration","url":"/documentation/docs/documentation-api/Flows/campaign-presence-registration-flow#flow-functionality","content":"Email Address Entry: The flow initiates by accepting an email address as input. The email address serves as a pivotal point to fetch relevant data and perform subsequent actions. Identification of Contact or Lead: The flow identifies whether the input email address is associated with a Lead or Contact within Salesforce. Data Update Interaction: If the email corresponds to a known Lead or Contact, the user is prompted to update specific fields: For Leads: Last Name, First Name, Email, Company, and Title. For Contacts: Last Name, First Name, and Email. Note: Updating the 'Company' for Contacts is intentionally omitted due to its relation with the Account object and should be modified directly in Salesforce if required. Lead Creation for Unknown Email: If the email address does not correspond to an existing Lead or Contact, the user is provided an option to create a new Lead.The user can enter relevant information: Last Name, First Name, Email, Company, and Title to create a new Lead record. Campaign Membership Management: Post-data update or Lead creation, the flow checks if the Contact or Lead is already a member of the campaign specified by recordId.If not a member, the individual is added to the campaign, and their membership status is initialized (e.g., 'Responded').If they are already a member, the status is updated accordingly.  &quot;Campaign Presence Registration&quot; allows users to ensure a structured and efficient method for managing campaign memberships, maintaining the flexibility to adapt the flow in alignment with dynamic business needs while ensuring that no potential leads are lost in the process. "},{"title":"QR Code Scanner Setup","type":0,"sectionRef":"#","url":"/documentation/docs/documentation-api/QR Code Module/qr-code-scanner-guide","content":"","keywords":""},{"title":"Installation:​","type":1,"pageTitle":"QR Code Scanner Setup","url":"/documentation/docs/documentation-api/QR Code Module/qr-code-scanner-guide#installation","content":"Before utilizing the QR Code Scanner component, ensure that the Mobee package is installed in your Salesforce environment. "},{"title":"How to Add the QR Code Scanner to an Object Page:​","type":1,"pageTitle":"QR Code Scanner Setup","url":"/documentation/docs/documentation-api/QR Code Module/qr-code-scanner-guide#how-to-add-the-qr-code-scanner-to-an-object-page","content":""},{"title":"Step-by-Step Instructions:​","type":1,"pageTitle":"QR Code Scanner Setup","url":"/documentation/docs/documentation-api/QR Code Module/qr-code-scanner-guide#step-by-step-instructions","content":"Access the Object Page: Navigate to the desired object page where you want to add the QR code scanner.Enter Edit Mode: Click on the 'Edit Page' option, usually available at the top right of the screen, to enter the Lightning App Builder.Add the QR Code Scanner Component: In the Lightning App Builder, look for the lightning components section on the left pane.Drag the 'scanQrCode' component and drop it onto the desired place on your page layout. Configure Component Attributes: Click on the added QR Code Scanner component to view its properties.In the 'Flow API Name' field, type in the desired flow's API name (preceded by the namespace prefix if you're using the built in Mobee Campaign Scan Flow). This flow will be executed when a QR code is scanned by the component.The attribute &quot;Record ID&quot; can be left empty. If left blank, it will automatically be populated with the ID of the record where the component is placed. Save &amp; Activate: Once done, save the changes and activate the page to reflect them in the Salesforce interface. "},{"title":"Essential Notes:​","type":1,"pageTitle":"QR Code Scanner Setup","url":"/documentation/docs/documentation-api/QR Code Module/qr-code-scanner-guide#essential-notes","content":"It's crucial to create the scannedId variable when establishing a flow that uses the QR code scanner, as this variable will store the ID of the scanned object. "},{"title":"Example Use Case: Add Contacts or Leads to a Campaign via QR Code Scanning​","type":1,"pageTitle":"QR Code Scanner Setup","url":"/documentation/docs/documentation-api/QR Code Module/qr-code-scanner-guide#example-use-case-add-contacts-or-leads-to-a-campaign-via-qr-code-scanning","content":"Navigate to Campaign: Start by accessing the desired campaign in Salesforce. Enter Edit Mode: Click on 'Edit Page' to switch to the Lightning App Builder. Insert QR Code Scanner Component: Find the 'scanQrCode' component under the 'Custom' section on the left.Drag and place the component where you want it on the campaign page layout. Configure the Component: Click on the component to see its attributes.In the 'Flow API Name' field, enter the name &quot;Mobee__Campaign_SCR_Scan&quot; (or the relevant flow name associated with the scanning function for campaigns). Perform Scanning: Exit the Lightning App Builder and navigate to the campaign page.Using a phone or a device with a camera, utilize the QR Code Scanner component to scan the QR codes of contacts or leads. Verification: After scanning, verify by checking the campaign membership list.Ensure that the scanned contact or lead has been successfully added to the campaign. Note: Ensure that the flow (&quot;Mobee__Campaign_SCR_Scan&quot; in this example) is correctly set up to handle the QR code data and perform the desired actions in Salesforce. "},{"title":"QR Code Scanner Integration for Campaign Membership Management​","type":1,"pageTitle":"QR Code Scanner Setup","url":"/documentation/docs/documentation-api/QR Code Module/qr-code-scanner-guide#qr-code-scanner-integration-for-campaign-membership-management","content":""},{"title":"Overview​","type":1,"pageTitle":"QR Code Scanner Setup","url":"/documentation/docs/documentation-api/QR Code Module/qr-code-scanner-guide#overview","content":"&quot;Mobee__Campaign_SCR_Scan&quot;, provided as a template flow in the Mobee package, seamlessly integrates with the QR code scanner module. It facilitates the addition of a contact or a lead to a campaign's membership list. Given its design as a template, this flow is highly adaptable to meet varying requirements. "},{"title":"Flow Functionality:​","type":1,"pageTitle":"QR Code Scanner Setup","url":"/documentation/docs/documentation-api/QR Code Module/qr-code-scanner-guide#flow-functionality","content":"Scanning and Identifying the ID: Upon scanning, the ID is retrieved and stored in the variable scannedId.The flow checks if this scannedId corresponds to a Lead or a Contact. Unknown ID Handling: If the scannedId does not match a Lead or Contact, the flow redirects to a Screen displaying a message stating that the ID is unknown. Checking Campaign Membership: If the scannedId is identified as a Lead or Contact, the flow then verifies if the respective record is already part of the campaign members of the campaign associated with the recordId (i.e., the campaign where the scanner module is placed). Handling Contact's Account Information: For contacts, due to the offline nature of the scan on Mobee, the flow manually fetches the related account information using GetCompanyById. As of now, in the offline mode of Mobee, there is a limitation wherein related fields embedded within Salesforce flows can't be accessed directly. This issue is set to be addressed in upcoming updates. Adding to Campaign Membership: If the Lead or Contact is not a member of the campaign, they are added to the campaign's membership list.Their status is set to 'Responded', though this can be customized within the flow as per requirements. Updating Existing Campaign Member: If the Lead or Contact is already a member of the campaign, their status will be updated to 'Responded'. Happy Scanning! "},{"title":"QR Code Generator Setup","type":0,"sectionRef":"#","url":"/documentation/docs/documentation-api/QR Code Module/qr-code-generator-guide","content":"","keywords":""},{"title":"Installation:​","type":1,"pageTitle":"QR Code Generator Setup","url":"/documentation/docs/documentation-api/QR Code Module/qr-code-generator-guide#installation","content":"Before leveraging the QR Code Generator component, ensure that the Mobee package is installed in your Salesforce environment. "},{"title":"How to Add the QR Code Generator to an Object Page:​","type":1,"pageTitle":"QR Code Generator Setup","url":"/documentation/docs/documentation-api/QR Code Module/qr-code-generator-guide#how-to-add-the-qr-code-generator-to-an-object-page","content":""},{"title":"Step-by-Step Instructions:​","type":1,"pageTitle":"QR Code Generator Setup","url":"/documentation/docs/documentation-api/QR Code Module/qr-code-generator-guide#step-by-step-instructions","content":"Access the Object Page: Navigate to the desired object page where you want the QR code generator.Enter Edit Mode: Click on the 'Edit Page' option, usually found at the top right, to switch to the Lightning App Builder.Add the QR Code Generator Component: In the Lightning App Builder, look for the lightning components section on the left pane.Drag the 'generateQrCode' component and place it at your preferred location on the page layout. Configure Component Attributes: The component is designed to automatically fetch the record ID of the object where it's placed, and use it for the QR code generation. No manual input is required. Save &amp; Activate: Once configured, save your changes and activate the page to reflect the modifications in the Salesforce interface. "},{"title":"Example Use Case: Generating QR Code for a Contact Record​","type":1,"pageTitle":"QR Code Generator Setup","url":"/documentation/docs/documentation-api/QR Code Module/qr-code-generator-guide#example-use-case-generating-qr-code-for-a-contact-record","content":"Navigate to a Contact: Start by accessing a specific Contact in Salesforce where you'd like a QR code. Enter Edit Mode: Click on 'Edit Page'. Insert QR Code Generator Component: Locate the 'generateQrCode' component in the left menu section.Drag and drop it to your desired position on the Contact page layout. QR Code Generation: Once placed and the page is saved, the component will automatically generate a QR code containing the Contact record ID.  Note: Make sure you have the necessary permissions to add components to page layouts in Salesforce. Happy QR Code Generating! "},{"title":"Custom Email Template","type":0,"sectionRef":"#","url":"/documentation/docs/documentation-api/QR Code Module/qr-codes-in-email-template","content":"","keywords":""},{"title":"Email Template Setup​","type":1,"pageTitle":"Custom Email Template","url":"/documentation/docs/documentation-api/QR Code Module/qr-codes-in-email-template#email-template-setup","content":"Open your Classic Email Templates: Go to your Salesforce Setup page, and look for the Classic Email Templates page.Create a new Email Template: Click on the New Template button, Custom (without using Classic Letterhead). Then fill the required fields on the Email Template Information page. "},{"title":"Template Content​","type":1,"pageTitle":"Custom Email Template","url":"/documentation/docs/documentation-api/QR Code Module/qr-codes-in-email-template#template-content","content":""},{"title":"Subject:​","type":1,"pageTitle":"Custom Email Template","url":"/documentation/docs/documentation-api/QR Code Module/qr-codes-in-email-template#subject","content":"Invitation to {!Contact.Name}  "},{"title":"HTML Body:​","type":1,"pageTitle":"Custom Email Template","url":"/documentation/docs/documentation-api/QR Code Module/qr-codes-in-email-template#html-body","content":"&lt;!DOCTYPE html&gt; &lt;html&gt; &lt;head&gt; &lt;title&gt;Invitation&lt;/title&gt; &lt;/head&gt; &lt;body&gt; &lt;p&gt;Dear valued customer,&lt;/p&gt; &lt;p&gt;We are excited to invite you to our event. Please find your personalized QR code below:&lt;/p&gt; &lt;img src=&quot;https://api.mobee-app.com/qr-code?width=200&amp;data={!CASESAFEID(Contact.Id)}&quot; alt=&quot;QR Code&quot;&gt; &lt;p&gt;This QR code is linked to your account. Your participation is highly appreciated.&lt;/p&gt; &lt;p&gt;Thank you!&lt;/p&gt; &lt;p&gt;Sincerely,&lt;br&gt;Your Organization&lt;/p&gt; &lt;/body&gt; &lt;/html&gt;  "},{"title":"Sample HTML Body Preview:​","type":1,"pageTitle":"Custom Email Template","url":"/documentation/docs/documentation-api/QR Code Module/qr-codes-in-email-template#sample-html-body-preview","content":" "},{"title":"Resulting Email​","type":1,"pageTitle":"Custom Email Template","url":"/documentation/docs/documentation-api/QR Code Module/qr-codes-in-email-template#resulting-email","content":"After the template is processed by Salesforce, the email will be sent to clients. Here's what the resulting email might look like: Sample Email Result:  "},{"title":"Explanation​","type":1,"pageTitle":"Custom Email Template","url":"/documentation/docs/documentation-api/QR Code Module/qr-codes-in-email-template#explanation","content":"The email template is set up as a Custom type, which means you have control over the content and layout.Classic Letterhead is not used, so the email won't have a predefined header/footer from a letterhead template.The subject of the email is dynamically generated using merge fields. {!Contact.Name} inserts the contact's name into the subject line.The HTML body of the email is where the main content resides.The img tag sources the QR code image from a URL. The URL includes the CASESAFEID(Contact.Id) merge field to dynamically generate the QR code based on the recipient's contact ID.A paragraph below the QR code explains the purpose of the QR code and its association with the recipient's contact.The email concludes with a thank you message and the sender's organization information. "},{"title":"Personalization​","type":1,"pageTitle":"Custom Email Template","url":"/documentation/docs/documentation-api/QR Code Module/qr-codes-in-email-template#personalization","content":"This template provides a personalized invitation experience for each recipient by incorporating their contact name and a QR code linked to their specific contact. This approach enhances client engagement and delivers a unique invitation experience through Salesforce email templates. "},{"title":"Admin Guide","type":0,"sectionRef":"#","url":"/documentation/docs/documentation-api/Timesheet Module/Admin Guide","content":"","keywords":""},{"title":"Introduction​","type":1,"pageTitle":"Admin Guide","url":"/documentation/docs/documentation-api/Timesheet Module/Admin Guide#introduction","content":"This user guide will help you understand and use the Time Entries management features in our system. You will find step-by-step instructions to add new projects and assignments, as well as how to view your colleagues' Time Entries. "},{"title":"Adding a New Project from an Opportunity​","type":1,"pageTitle":"Admin Guide","url":"/documentation/docs/documentation-api/Timesheet Module/Admin Guide#adding-a-new-project-from-an-opportunity","content":""},{"title":"Navigate to the Opportunity​","type":1,"pageTitle":"Admin Guide","url":"/documentation/docs/documentation-api/Timesheet Module/Admin Guide#navigate-to-the-opportunity","content":"Step 1: Access the &quot;Opportunities&quot; module Log in to your Salesforce account.Go to the Salesforce homepage.In the top navigation bar, click on the &quot;Opportunities&quot; tab to open the list of opportunities.Choose the relevant opportunity. Step 2: Click on the &quot;New Project&quot; toolbar button to create a project from the opportunity.  The system will launch a dialog box with variables initialized from the opportunity as follows: (complete the required fields according to your needs)  The &quot;New Project&quot; form is presented to the user with many fields pre-filled from the opportunity. This facilitates data entry and reduces errors. "},{"title":"Adding a New \"Assignment\" from the Project​","type":1,"pageTitle":"Admin Guide","url":"/documentation/docs/documentation-api/Timesheet Module/Admin Guide#adding-a-new-assignment-from-the-project","content":""},{"title":"Navigate to the Relevant Project​","type":1,"pageTitle":"Admin Guide","url":"/documentation/docs/documentation-api/Timesheet Module/Admin Guide#navigate-to-the-relevant-project","content":"Step 1: Access the project page Access the list of projects by clicking on the &quot;Projects&quot; tab in the top navigation bar.Select the project to which you want to add a new &quot;Assignment.&quot;  Step 2: Add a New &quot;Assignment&quot; On the relevant project page,Click on the &quot;New Assignment&quot; button to create a new assignment.Fill in the assignment details, such as the assignee's name, price, quantity, work description, start and end dates, etc.Save the newly created assignment. The &quot;New Assignment&quot; form is presented to the user, with many fields pre-filled from the project. This facilitates data entry and reduces errors.  "},{"title":"Viewing Time Entries of Salesforce Community Users​","type":1,"pageTitle":"Admin Guide","url":"/documentation/docs/documentation-api/Timesheet Module/Admin Guide#viewing-time-entries-of-salesforce-community-users","content":""},{"title":"Navigate to the Relevant Contact​","type":1,"pageTitle":"Admin Guide","url":"/documentation/docs/documentation-api/Timesheet Module/Admin Guide#navigate-to-the-relevant-contact","content":"Each Salesforce Community user is created as a Contact in Salesforce. Step 1: Access &quot;Contacts&quot; Access the list of contacts by clicking on the &quot;Contacts&quot; tab in the top navigation bar.Select the contact (colleague) for whom you want to view the Time Entries.Use the available filter on the contact page.The Contact page is displayed with the details. Step 2: Access the &quot;Time Entries.&quot; The Time Entries are displayed in the tab: "},{"title":"Viewing Time Entries of Standard Salesforce Users​","type":1,"pageTitle":"Admin Guide","url":"/documentation/docs/documentation-api/Timesheet Module/Admin Guide#viewing-time-entries-of-standard-salesforce-users","content":""},{"title":"Use the Global Search Bar.​","type":1,"pageTitle":"Admin Guide","url":"/documentation/docs/documentation-api/Timesheet Module/Admin Guide#use-the-global-search-bar","content":"Enter the colleague's name in the search bar. A list will show users matching the criteria and the nature of the found object (Account, Contact, User, etc.).Choose &quot;User,&quot; and the system will direct you to the relevant user.The timesheet will be displayed at the top of the page as follows:  "},{"title":"Time Sheet Approval Process","type":0,"sectionRef":"#","url":"/documentation/docs/documentation-api/Timesheet Module/Approval Process Guide","content":"","keywords":""},{"title":"Introduction​","type":1,"pageTitle":"Time Sheet Approval Process","url":"/documentation/docs/documentation-api/Timesheet Module/Approval Process Guide#introduction","content":"You can add an approval process to have your manager, or a designated approver, review and approve or reject your submitted time entries.  *Approval Process Submission Preview*  "},{"title":"Approval Process Activation​","type":1,"pageTitle":"Time Sheet Approval Process","url":"/documentation/docs/documentation-api/Timesheet Module/Approval Process Guide#approval-process-activation","content":""},{"title":"1. Create The Approval Process​","type":1,"pageTitle":"Time Sheet Approval Process","url":"/documentation/docs/documentation-api/Timesheet Module/Approval Process Guide#1-create-the-approval-process","content":"The following section is a step-by-step guide for creating a standard approval process, where some actions are mandatory and others are optional. (The mandatory steps are highlighted in bold) Go to the setup pageAccess the approval processesManage approval processes for: time periodCreate new approval process: use standard setup wizard  Step 1: Enter Name And Description​  Step 2: Specify Entry Criteria​ No Action To Do  Step 3: Specify Approver FielD And Record Editability Properties​ Specify Approver Field (for automated approval routing) Select: ManagerThis step is important only if you wish to designate the manager as the approver (after completing the approval process creation) Record Editability Select: Administrators or the currently assigned approver can edit records during the approval process.  Step 4: Select Notification Templates​ No Action To Do  Step 5: Select Fields To Display On Approval Page Layout​ No Action To Do  Step 6: Specify Initial Submitters​ Initial submitters Select: Time period owner, record creator Submission settings Select: Allow submitters to recall approval requests   "},{"title":"2. Manage The Approval Process​","type":1,"pageTitle":"Time Sheet Approval Process","url":"/documentation/docs/documentation-api/Timesheet Module/Approval Process Guide#2-manage-the-approval-process","content":"After completing the creation of the approval process, you will be able to manage actions (initial submission, final approval, final rejection, and recall). These actions must be included for the approval process to function as intended.  *Actions And Approval Steps Preview* 2.1. Initial Submission Actions​ Add existing Add: Field Update: Update Status to Submitted   2.2. Final Approval Actions​ Edit record lock and select: Unlock record for editing Add existing and add: Field Update: Update Status to Approved    2.3. Final Rejection Actions​ Add existing Add: a. Field Update: Update Status to Rejected b. Email alert: Send Email Notification to Assignee on Rejection (this is an email alert sent to the timesheet submitter if their timesheet is rejected by the approver. if not needed, this email alert should not be added)   2.4. Recall Actions​ Add existing Add: Field Update: Update Status to Draft    "},{"title":"3. Choose The Approver​","type":1,"pageTitle":"Time Sheet Approval Process","url":"/documentation/docs/documentation-api/Timesheet Module/Approval Process Guide#3-choose-the-approver","content":"3.1. Assign The Approver On The Approval Process​ The approver may be the submitter's manager or a specific user responsible for all submitters, such as the hr manager, ensuring that all timesheets are directed to one individual for approval. This is also controlled at the level of the approval process after its creation.   3.2. Permission Set Assignment​ In Setup &gt; Users, set the Mobee Approve All Timesheets permission set on the approver user.    "},{"title":"Approval Process Usage​","type":1,"pageTitle":"Time Sheet Approval Process","url":"/documentation/docs/documentation-api/Timesheet Module/Approval Process Guide#approval-process-usage","content":"1. Submitter​ User submits his time sheet for approval This action is recallable (1) Submission comment (2) Time entries submitted indicator (3)  2. Approver​ Assigned approver can approve/reject on submitter's contact the assigned approver reviews the timesheet (submitted time entries) and has the option to either approve or reject the submission.   "},{"title":"Approval Process Behavior And Considerations​","type":1,"pageTitle":"Time Sheet Approval Process","url":"/documentation/docs/documentation-api/Timesheet Module/Approval Process Guide#approval-process-behavior-and-considerations","content":"Partial approval is possible Example A: the user submits a request for days off, which gets approved. later, they submit their assigned workload for the remaining days   Example B: the user submits the last days of the month for approval. in the following month, for the same assignment, they submit the remaining weekdays for approval   When a timesheet is approved, a notification is sent to the submitter When a timesheet is rejected, both a notification and an email are sent to the submitter (the email is sent if added according to 2.3. final rejection actions) When any pending time entries on a timesheet are rejected, the entire timesheet becomes editable Hovering over the following icons , and displays comments from the submitter or approver related to the submission, approval, or rejection, respectively The following icons and serve as indicators showing the status of the time entry "},{"title":"Template Types and Syntax","type":0,"sectionRef":"#","url":"/documentation/docs/documentation-api/Document Generation Module/mobee-document-types","content":"","keywords":""},{"title":"Template Types​","type":1,"pageTitle":"Template Types and Syntax","url":"/documentation/docs/documentation-api/Document Generation Module/mobee-document-types#template-types","content":"Mobee supports two types of templates: "},{"title":"Simple Document Template​","type":1,"pageTitle":"Template Types and Syntax","url":"/documentation/docs/documentation-api/Document Generation Module/mobee-document-types#simple-document-template","content":"When the checkbox Combined Document is not checked, the template is designed for unitary generation. This means that the template includes information for one only. For instance, if you create a simple template for the &quot;Contact&quot; object, it will incorporate the information of one contact and its related data. "},{"title":"Combined Document Template​","type":1,"pageTitle":"Template Types and Syntax","url":"/documentation/docs/documentation-api/Document Generation Module/mobee-document-types#combined-document-template","content":"When the checkbox Combined Document is checked, it indicates that the template will be generated for multiple records simultaneously. This template employs a special syntax to loop through a list of records. To access fields on each record in a combined document, your template should start by looping through the list of items using the following tag {#items}{/}. Check the loops section for more details. "},{"title":"Syntax​","type":1,"pageTitle":"Template Types and Syntax","url":"/documentation/docs/documentation-api/Document Generation Module/mobee-document-types#syntax","content":"The syntax of tags used in Mobee Templates is inspired by the language-agnostic Mustache specification. Normal tags start with an alphabetical character.Other types of tags start with special prefixes. For example: Accessing merge fields on the object: {Salutation} {firstName} {lastName}Accessing related lists data: {#cases} and {/} to start and close a tag. Check the loops section for more details.Inserting dynamic images: {%ImageUrl__c} will add the image for the field &quot;ImageUrl__c&quot;. Check the Dynamic images section for more details. For example, to access the &quot;Contact&quot; data using the given syntax in your template: Hello {Salutation} {FirstName} {LastName}!  Output: Hello Mr. John Doe!  "},{"title":"Conditions​","type":1,"pageTitle":"Template Types and Syntax","url":"/documentation/docs/documentation-api/Document Generation Module/mobee-document-types#conditions","content":"Conditions start with the # character and end with a slash. For instance, {#Salutation == &quot;Mr.&quot;} starts a condition and {/} ends it. Note: To verify checkbox fields (true or false), use the following syntax: The contact {Name} {#HasOptedOutOfEmail == 1}has{/}{#HasOptedOutOfEmail == 0}hasn’t{/} opted out of emails.  Output: The contact Mr. John Doe has opted out of emails.  "},{"title":"Logical expressions​","type":1,"pageTitle":"Template Types and Syntax","url":"/documentation/docs/documentation-api/Document Generation Module/mobee-document-types#logical-expressions","content":"You can use the following operators for more complex logical expressions: AND a &amp;&amp; bOR a || bADDITION a + bSUBTRACTION a - bMULTIPLICATION a * bMODULO a % bDIVISION a / bTERNARY a ? b : cASSIGNMENT a = 1EQUALITY/INEQUALITY a == 1, a != 1RELATIONAL a &gt; 1, a &lt; 1, a &gt;= 1, a &lt;= 1OPERATOR PRECEDENCE with parentheses (a &amp;&amp; b) || cEXPONENTIAL NOTATION: 12e3 =&gt; returns 12000 Example: {#products.length &gt; 1}There are multiple products{/} {#firstName == &quot;John&quot;}Hello John{/}  The first condition will display the section only if there are 2 or more products. The second condition will display the section only if the username is the string &quot;John&quot;. Output: There are multiple products Hello John  "},{"title":"Loops​","type":1,"pageTitle":"Template Types and Syntax","url":"/documentation/docs/documentation-api/Document Generation Module/mobee-document-types#loops","content":"As mentioned earlier, we start looping through a list of data with the &quot;#&quot; symbol. Example: {#Cases} {CaseNumber}: {Description}. {/}  Output: 00001299: Need Access Permission to visit location. 00001624: Support Client. 00001836: The cable of the battery charger is missing.  Note: Each merge field used in the loop section refers to the fields of the current related object. If the field is not found on the related object, the engine will reference it from the parent object. "},{"title":"Dynamic Images​","type":1,"pageTitle":"Template Types and Syntax","url":"/documentation/docs/documentation-api/Document Generation Module/mobee-document-types#dynamic-images","content":"Dynamic images can be seamlessly integrated into your generated documents through the utilization of dynamic placeholders. For example, if you possess a field named ProfilePicture__c housing the URL of an image or the image encoded as a Base64 string, it can be incorporated into your document effortlessly using the designated tag: {%ProfilePicture__c} (starting with the % symbol). "},{"title":"Base64 Images​","type":1,"pageTitle":"Template Types and Syntax","url":"/documentation/docs/documentation-api/Document Generation Module/mobee-document-types#base64-images","content":"To include an image using base64 data, simply encode the image into Base64 format and store it directly in your salesforce field. "},{"title":"URL Images​","type":1,"pageTitle":"Template Types and Syntax","url":"/documentation/docs/documentation-api/Document Generation Module/mobee-document-types#url-images","content":"To incorporate an image using a URL, adhere to the following procedural steps: Navigate to &quot;Setup&quot; within Salesforce.In the quick find box, locate and select &quot;Remote Site Settings.&quot;Click the &quot;New Remote Site&quot; button.Assign a name for the site (e.g., &quot;Imgur Site&quot;).In the &quot;Remote Site URL&quot; field, input the base URL of the image's location—such as &quot;https://i.imgur.com.&quot;Enable the &quot;Disable Protocol Security&quot; checkbox to permit retrieval over HTTP.Select &quot;Save&quot; to preserve the changes.  Proceed with the following steps to incorporate the URL into the trusted URLs with all Content Security Policy (CSP) directives enabled: In the setup page, locate &quot;Trusted URLs&quot; using the quick find box.Select the &quot;New Trusted Site&quot; button.Assign a name for the trusted site (e.g., &quot;Imgur Trusted&quot;).In the &quot;Site URL&quot; field, input the same base URL as before, namely &quot;https://i.imgur.com.&quot;Enable all CSP directives: &quot;Connect,&quot; &quot;Font,&quot; &quot;Img,&quot; &quot;Media,&quot; &quot;Object,&quot; &quot;Script,&quot; &quot;Style.&quot;Confirm the changes by clicking &quot;Save.&quot;   You have now set up remote site settings and trusted URLs to securely retrieve the image over HTTP. You can then use the {% ProfilePicture__c} tag to dynamically include the image in your generated documents. "},{"title":"Filters​","type":1,"pageTitle":"Template Types and Syntax","url":"/documentation/docs/documentation-api/Document Generation Module/mobee-document-types#filters","content":"With filters, it is possible to manipulate any given data field. Mobee suggest multiple filters designed to format, manipulate, and customize dynamic content within document templates. These filters help users format dates, change text case, and generate tailored content. Usage Example Scenario:A user is generating a contract document that includes custom date formatting and dynamically formatted names. The system should return dates in different formats and convert names to uppercase or lowercase as required. Template: Hello {Salutation} {FirstName} {LastName | upper}! Today's date is {docUtils.today | formatDate: '[[&quot;year&quot;: &quot;numeric&quot;, &quot;month&quot;: &quot;long&quot;, &quot;day&quot;: &quot;numeric&quot;]]'}. The contract start date is {StartDate | shortDate}. Next year, this date will be {StartDate | followingYear}.  Sample Input Data: Field\tValueSalutation\tMr. FirstName\tJohn LastName\tDoe StartDate\t2022-01-21 Expected Output: Hello Mr. John DOE! Today's date is January 21, 2022. The contract start date is 21/01/2022. Next year, this date will be 2023.  "},{"title":"String Filters​","type":1,"pageTitle":"Template Types and Syntax","url":"/documentation/docs/documentation-api/Document Generation Module/mobee-document-types#string-filters","content":"lower: Converts text to lowercase. Example: {&quot;Hello World&quot; | lower} Output: hello world upper: Converts text to uppercase. Example: {&quot;hello world&quot; | upper} Output: HELLO WORLD   "},{"title":"Date Filters​","type":1,"pageTitle":"Template Types and Syntax","url":"/documentation/docs/documentation-api/Document Generation Module/mobee-document-types#date-filters","content":"shortDate: Formats the date in a concise format. Example: {StartDate | shortDate} Output: 21/01/2022 followingMonth: Returns the next month from the given date. Example: {StartDate | followingMonth: '[[&quot;year&quot;: &quot;numeric&quot;, &quot;month&quot;: &quot;long&quot;]]'} Output: February 2022 followingYear: Returns the year after the given date. Example: {StartDate | followingYear: '[[&quot;year&quot;: &quot;numeric&quot;]]'} Output: 2023 lastWorkingDayOfMonth: Returns the last working day of the month for the given date. Example: {StartDate | lastWorkingDayOfMonth} Output: 31/01/2022 formatDate: Formats the date based on the specified options. Example: {StartDate | formatDate: '[[&quot;year&quot;: &quot;numeric&quot;, &quot;month&quot;: &quot;short&quot;, &quot;day&quot;: &quot;2-digit&quot;]]'} Output: 21 Jan 2022   Formatting Options for Date Filters​ The date filters (followingMonth, followingYear, lastWorkingDayOfMonth, and formatDate) support customizable formatting using the following options: [[ &quot;weekday&quot;: &quot;narrow&quot; | &quot;short&quot; | &quot;long&quot;, &quot;era&quot;: &quot;narrow&quot; | &quot;short&quot; | &quot;long&quot;, &quot;year&quot;: &quot;numeric&quot; | &quot;2-digit&quot;, &quot;month&quot;: &quot;numeric&quot; | &quot;2-digit&quot; | &quot;narrow&quot; | &quot;short&quot; | &quot;long&quot;, &quot;day&quot;: &quot;numeric&quot; | &quot;2-digit&quot;, &quot;hour&quot;: &quot;numeric&quot; | &quot;2-digit&quot;, &quot;minute&quot;: &quot;numeric&quot; | &quot;2-digit&quot;, &quot;second&quot;: &quot;numeric&quot; | &quot;2-digit&quot;, &quot;timeZoneName&quot;: &quot;short&quot; | &quot;long&quot;, &quot;timeZone&quot;: &quot;Asia/Shanghai&quot;, &quot;hour12&quot;: true | false, &quot;hourCycle&quot;: &quot;h11&quot; | &quot;h12&quot; | &quot;h23&quot; | &quot;h24&quot;, &quot;formatMatcher&quot;: &quot;basic&quot; | &quot;best fit&quot; ]]  This flexibility ensures users can easily tailor date formats to their specific needs, making documents accurate and localized for diverse audiences. "},{"title":"Number Filters​","type":1,"pageTitle":"Template Types and Syntax","url":"/documentation/docs/documentation-api/Document Generation Module/mobee-document-types#number-filters","content":"currency Function​ The currency function is designed to format numeric values as currencies, making it easy to present financial data in documents. By specifying a 3-letter currency ISO code, the function formats the input number and appends the corresponding currency symbol based on the locale of the document template. To handle dynamic currency requirements, such as using the currency associated with the current record (e.g., an invoice or account), the function allows you to pass dynamic values like $record.CurrencyIsoCode. ReturnsThe function returns a formatted string representing the number as a currency, including: The appropriate currency symbol.Number formatting (thousands separators and decimal points) based on the document's locale. Usage Example Scenario:A company generates invoices in multiple currencies depending on the country of the customer. The currency symbol should dynamically adjust based on the specific invoice’s currency, ensuring proper presentation of financial data. Template: Account’s Annual Revenue: { Account.AnnualRevenue | currency: '$record.Account.CurrencyIsoCode'} Invoice Amount: {Amount | currency: '$record.CurrencyIsoCode'}  Sample Input Data: { &quot;Account&quot;: { &quot;AnnualRevenue&quot;: 13000000, &quot;CurrencyIsoCode&quot;: &quot;USD&quot; }, &quot;Amount&quot;: 15123, &quot;CurrencyIsoCode&quot;: &quot;JPY&quot; }  Expected Output: Account’s Annual Revenue: $13,000,000.00 Invoice Amount: ¥15,123  The currency function simplifies the presentation of monetary values by dynamically adapting to various currencies, making documents more user-friendly and suitable for international audiences.  "},{"title":"List Filters​","type":1,"pageTitle":"Template Types and Syntax","url":"/documentation/docs/documentation-api/Document Generation Module/mobee-document-types#list-filters","content":"groupBy Function Documentation​ The groupBy function organizes elements in a collection by grouping them based on specified keys. Multiple levels of grouping can be achieved by providing multiple keys, separated by semicolons. The grouping order follows the sequence of the specified keys. Returns The function returns an object containing the following properties: $groupedKey#: Represents the grouping key at each level, where # denotes the grouping level, starting from 1.$groupedItems#: Contains the items associated with each grouping key. When multiple levels of grouping are applied, each level contains its own $groupedKey# and $groupedItems#, incrementing the index for each deeper level. Usage Example Scenario: Grouping invoice items by Category and Subcategory. Template: Invoice Number: {InvoiceNumber} {#InvoiceItems | groupBy: 'Category;Subcategory'} - Category: {$groupedKey1} {#$groupedItems1} - Subcategory: {$groupedKey2} {#$groupedItems2} - Item: {ItemName} Quantity: {Quantity} Price: {Price | currency: 'USD'} {/} {/} {/}  Sample Data (Table Format): Category\tSubcategory\tItem Name\tQuantity\tPriceElectronics\tLaptops\tDell XPS 13\t2\t1200 Electronics\tLaptops\tMacBook Pro\t1\t2000 Electronics\tPhones\tiPhone 14\t3\t999 Furniture\tChairs\tOffice Chair\t5\t150 Sample Data (JSON Format): { &quot;InvoiceNumber&quot;: &quot;INV-2024-001&quot;, &quot;InvoiceItems&quot;: [ { &quot;Category&quot;: &quot;Electronics&quot;, &quot;Subcategory&quot;: &quot;Laptops&quot;, &quot;ItemName&quot;: &quot;Dell XPS 13&quot;, &quot;Quantity&quot;: 2, &quot;Price&quot;: 1200 }, { &quot;Category&quot;: &quot;Electronics&quot;, &quot;Subcategory&quot;: &quot;Laptops&quot;, &quot;ItemName&quot;: &quot;MacBook Pro&quot;, &quot;Quantity&quot;: 1, &quot;Price&quot;: 2000 }, { &quot;Category&quot;: &quot;Electronics&quot;, &quot;Subcategory&quot;: &quot;Phones&quot;, &quot;ItemName&quot;: &quot;iPhone 14&quot;, &quot;Quantity&quot;: 3, &quot;Price&quot;: 999 }, { &quot;Category&quot;: &quot;Furniture&quot;, &quot;Subcategory&quot;: &quot;Chairs&quot;, &quot;ItemName&quot;: &quot;Office Chair&quot;, &quot;Quantity&quot;: 5, &quot;Price&quot;: 150 } ] }  Expected Output: Invoice Number: INV-2024-001 Category: Electronics Subcategory: Laptops Item: Dell XPS 13 Quantity: 2 Price: $1,200.00Item: MacBook Pro Quantity: 1 Price: $2,000.00 Subcategory: Phones Item: iPhone 14 Quantity: 3 Price: $999.00 Category: Furniture Subcategory: Chairs Item: Office Chair Quantity: 5 Price: $150.00 This example illustrates how the groupBy function can be used to organize data effectively based on hierarchical categories.  sortBy Function​ The sortBy function helps you arrange items in a list based on specific fields, such as sorting by category and price. Example Template: {#InvoiceItems | sortBy: 'Category;Price'} - {ItemName}: {Price} {/}  Expected Output: - Office Chair: 150 - Dell XPS 13: 1200 - MacBook Pro: 2000   htmlList Function​ The htmlList function turns an HTML string into a simple list. Example Template: {richTextField: htmlList}  Data {richTextField: '&lt;ul&gt;&lt;li&gt;Item 1&lt;/li&gt;&lt;li&gt;Item 2&lt;/li&gt;&lt;/ul&gt;'}  Expected Output: - Item 1 - Item 2   multiPicklist Function​ The multiPicklist function converts a string into a list using specific options, such as a separator and bullet symbol. Example Data {fruits: 'Apple;Orange;Banana'}  Template: {fruits | multiPicklist: '[[&quot;separator&quot;: &quot;;&quot;, &quot;bulletSymbol&quot;: &quot;-&quot; ]]'}  Expected Output: - Apple - Orange - Banana   where Function​ The where function helps you filter items that match specific conditions, such as selecting only electronic items. Example Template: {#InvoiceItems | where: 'Category==&quot;Electronics&quot;'} - {ItemName} {/}  Expected Output: - Dell XPS 13 - MacBook Pro - iPhone 14  sum Function​ The sum function allows you to calculate the total of values within a specific field in a list. The result of this calculation can be accessed using the $result placeholder. Like other placeholders, you can apply various number filters to it like the currency. Example Template: {#Opportunities | sum: 'Amount'}{$result | currency: 'EUR'}{/}  Expected Output: 15 123,00 €  product Function​ The product function allows you to calculate the product (multiplication) of values within a specific field in a list. The result of this calculation can be accessed using the $result placeholder. Like other placeholders, you can apply various number filters to it. Example Template: {#Items | product: 'Value'}{$result | formatNumber: '[[&quot;maximumSignificantDigits&quot;: 3]]'}{/}  Expected Output: 123.000  "}]